import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests
import time
import sys
from urllib.parse import urljoin

 Configuration
SMTP_CONFIG = {
    'server': 'smtp.gmail.com',
    'port': 587,
    'user': "yaswanthkumarch2001@gmail.com",
    'password': "uqjc bszf djfw bsor",  # Use Gmail App Password
    'timeout': 10
}

EMAIL_CONFIG = {
    'to': "eshwar@middlewaretalents.com",
    'from': "yaswanthkumarch2001@gmail.com",
    'subject_prefix': "🚀 Deployment Approval Needed - "
}

APPROVAL_CONFIG = {
    'public_url': "https://465e-136-232-205-158.ngrok-free.app",
    'max_retries': 3,
    'poll_interval': 10,  #seconds
    'max_wait_time': 10 * 60  #10 minutes in seconds
}

class ApprovalSystem:
    def __init__(self):
        self.session = requests.Session()
        self.session.timeout = 5

    def generate_token(self):
        """Generate a new approval token from the server"""
        endpoint = urljoin(APPROVAL_CONFIG['public_url'], "/generate_token")
        
        for attempt in range(1, APPROVAL_CONFIG['max_retries'] + 1):
            try:
                resp = self.session.post(endpoint)
                resp.raise_for_status()
                return resp.json()["token"]
            except Exception as e:
                print(f"Attempt {attempt} to generate token failed:", str(e))
                if attempt == APPROVAL_CONFIG['max_retries']:
                    raise RuntimeError("Failed to generate token after multiple attempts")
                time.sleep(2)

    def send_approval_email(self, approval_link):
        """Send the approval request email with the approval link"""
        msg = MIMEMultipart('alternative')
        msg['From'] = EMAIL_CONFIG['from']
        msg['To'] = EMAIL_CONFIG['to']
        msg['Subject'] = EMAIL_CONFIG['subject_prefix'] + time.strftime('%Y-%m-%d %H:%M')
        
        html_body = f"""
<html>
  <head>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
      body {{
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
          Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        background-color: #f7fafc;
        margin: 0; padding: 20px;
      }}
      .container {{
        background: #ffffff;
        max-width: 600px;
        margin: 0 auto;
        padding: 30px 40px;
        border-radius: 10px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      }}
      h2 {{
        color: #2c3e50;
        font-weight: 600;
        font-size: 28px;
        margin-bottom: 15px;
        text-align: center;
      }}
      p {{
        font-size: 16px;
        color: #555;
        line-height: 1.6;
      }}
      .button-container {{
        margin: 30px 0;
        text-align: center;
      }}
      a.button {{
        background: #2563eb;
        color: #ffffff !important;
        text-decoration: none;
        padding: 14px 30px;
        font-weight: 600;
        font-size: 17px;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(37, 99, 235, 0.4);
        transition: background-color 0.3s ease;
        display: inline-block;
      }}
      a.button:hover {{
        background: #1d4ed8;
      }}
      .footer {{
        font-size: 13px;
        color: #999;
        text-align: center;
        margin-top: 30px;
        border-top: 1px solid #e2e8f0;
        padding-top: 15px;
        font-style: italic;
      }}
    </style>
  </head>
  <body>
    <div class="container">
      <h2>🚨 Deployment Approval Request</h2>
      <p>Hello,</p>
      <p>The deployment pipeline requires your immediate attention and approval to proceed. Please review the details and respond by clicking the button below.</p>
      <div class="button-container">
        <a href="{approval_link}" target="_blank" class="button">Approve or Reject Deployment</a>
      </div>
      <p>If you did not expect this request, please contact the DevOps team immediately.</p>
      <p class="footer">&copy; {time.strftime('%Y')} Your Company. All rights reserved.</p>
    </div>
  </body>
</html>
"""
        msg.attach(MIMEText(html_body, 'html'))

        print("Sending approval email...")
        try:
            with smtplib.SMTP(SMTP_CONFIG['server'], SMTP_CONFIG['port'], timeout=SMTP_CONFIG['timeout']) as server:
                server.starttls()
                server.login(SMTP_CONFIG['user'], SMTP_CONFIG['password'])
                server.send_message(msg)
            print("Email sent successfully.")
        except Exception as e:
            print("Failed to send email:", str(e))
            raise

    def poll_approval_status(self, token):
        """Poll the server for approval status"""
        endpoint = urljoin(APPROVAL_CONFIG['public_url'], f"/status/{token}")
        
        print(f"Waiting for approval decision (up to {APPROVAL_CONFIG['max_wait_time']//60} minutes)...")
        elapsed = 0
        
        while elapsed < APPROVAL_CONFIG['max_wait_time']:
            try:
                resp = self.session.get(endpoint)
                resp.raise_for_status()
                data = resp.json()
                
                status = data.get("status", "").lower()
                used = data.get("used", False)
                reason = data.get("reason", "")

                if used and status == "pending":
                    print("Approval link has been used but no decision recorded. Treating as expired.")
                    return None, None

                if status in ["approved", "rejected"]:
                    print(f"Decision received: {status.upper()}")
                    print(f"Reason: {reason}")
                    return status, reason

                print(f"Still pending... checked at {time.strftime('%H:%M:%S')}")
            except Exception as e:
                print("Error polling status:", str(e))

            time.sleep(APPROVAL_CONFIG['poll_interval'])
            elapsed += APPROVAL_CONFIG['poll_interval']

        print("Timeout waiting for approval.")
        return None, None

    def run(self):
        """Main execution flow"""
        try:
            token = self.generate_token()
            approval_link = urljoin(APPROVAL_CONFIG['public_url'], f"/approval/{token}")
            self.send_approval_email(approval_link)

            status, reason = self.poll_approval_status(token)

            if status == "approved":
                print("✅ Deployment approved. Proceeding with pipeline.")
                # Add your pipeline continuation logic here
                return True
            elif status == "rejected";
                print("❌ Deployment rejected. Aborting pipeline.")
                return False
            else:
                print("⚠️ No valid response received or link expired. Aborting pipeline.")
                return False
                
        except Exception as e;
            print("Error in approval process:", str(e))
            return False

if __name__ == "__main__":
    approval_system = ApprovalSystem()
    success = approval_system.run()
    sys.exit(0 if(success),else 1)