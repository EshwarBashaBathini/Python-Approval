import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests
import time
import sys

# === CONFIGURATION ===
smtp_user = "yaswanthkumarch2001@gmail.com"
smtp_password = "uqjc bszf djfw bsor"  # Use Gmail App Password
to_email = "eshwar@middlewaretalents.com"
public_url = "https://465e-136-232-205-158.ngrok-free.app"  # Replace with your actual Flask server URL

MAX_RETRIES = 3
POLL_INTERVAL = 10  # seconds
MAX_WAIT_TIME = 10 * 60  # 10 minutes in seconds

def generate_token():
    for attempt in range(MAX_RETRIES):
        try:
            resp = requests.post(f"{public_url}/generate_token", timeout=5)
            resp.raise_for_status()
            return resp.json()["token"]
        except Exception as e:
            print(f"Attempt {attempt+1} to generate token failed:", e)
            if attempt == MAX_RETRIES - 1:
                sys.exit(1)
            time.sleep(2)

def send_email(approval_link):
    subject = f"🚀 Deployment Approval Needed - {time.strftime('%Y-%m-%d %H:%M')}"
    html_body = f"""
<html>
  <head>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');
      body {{
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
          Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        background-color: #f7fafc;
        margin: 0; padding: 20px;
      }}
      .container {{
        background: #ffffff;
        max-width: 600px;
        margin: 0 auto;
        padding: 30px 40px;
        border-radius: 10px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      }}
      h2 {{
        color: #2c3e50;
        font-weight: 600;
        font-size: 28px;
        margin-bottom: 15px;
        text-align: center;
      }}
      p {{
        font-size: 16px;
        color: #555;
        line-height: 1.6;
      }}
      .button-container {{
        margin: 30px 0;
        text-align: center;
      }}
      a.button {{
        background: #2563eb;
        color: #ffffff !important;
        text-decoration: none;
        padding: 14px 30px;
        font-weight: 600;
        font-size: 17px;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(37, 99, 235, 0.4);
        transition: background-color 0.3s ease;
        display: inline-block;
      }}
      a.button:hover {{
        background: #1d4ed8;
      }}
      .footer {{
        font-size: 13px;
        color: #999;
        text-align: center;
        margin-top: 30px;
        border-top: 1px solid #e2e8f0;
        padding-top: 15px;
        font-style: italic;
      }}
    </style>
  </head>
  <body>
    <div class="container">
      <h2>🚨 Deployment Approval Request</h2>
      <p>Hello,</p>
      <p>The deployment pipeline requires your immediate attention and approval to proceed. Please review the details and respond by clicking the button below.</p>
      <div class="button-container">
        <a href="{approval_link}" target="_blank" class="button">Approve or Reject Deployment</a>
      </div>
      <p>If you did not expect this request, please contact the DevOps team immediately.</p>
      <p class="footer">&copy; {time.strftime('%Y')} Your Company. All rights reserved.</p>
    </div>
  </body>
</html>
"""
    msg = MIMEMultipart('alternative')
    msg['From'] = smtp_user
    msg['To'] = to_email
    msg['Subject'] = subject
    msg.attach(MIMEText(html_body, 'html'))

    print("Sending approval email...")
    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(smtp_user, smtp_password)
        server.sendmail(smtp_user, to_email, msg.as_string())
        server.quit()
        print("Email sent successfully.")
    except Exception as e:
        print("Failed to send email:", e)
        sys.exit(1)

def poll_approval_status(token):
    print(f"Waiting for approval decision (up to {MAX_WAIT_TIME//60} minutes)...")
    elapsed = 0
    while elapsed < MAX_WAIT_TIME:
        try:
            resp = requests.get(f"{public_url}/status/{token}", timeout=5)
            resp.raise_for_status()
            data = resp.json()
            status = data.get("status", "").lower()
            used = data.get("used", False)
            reason = data.get("reason", "")

            if used and status == "pending":
                # This can happen if the form was submitted but status not updated - treat as expired
                print("Approval link has been used but no decision recorded. Treating as expired.")
                return None, None

            if status in ["approved", "rejected"]:
                print(f"Decision received: {status.upper()}")
                print(f"Reason: {reason}")
                return status, reason

            if used and status == "pending":
                # token used but no status change — treat as expired
                print("Approval link used without decision. Expired.")
                return None, None

            print(f"Still pending... checked at {time.strftime('%H:%M:%S')}")
        except Exception as e:
            print("Error polling status:", e)

        time.sleep(POLL_INTERVAL)
        elapsed += POLL_INTERVAL

    print("Timeout waiting for approval.")
    return None, None

def main():
    token = generate_token()
    approval_link = f"{public_url}/approval/{token}"
    send_email(approval_link)

    status, reason = poll_approval_status(token)

    if status == "approved":
        print("✅ Deployment approved. Proceeding with pipeline.")
        # Proceed with pipeline actions here
    elif status == "rejected":
        print("❌ Deployment rejected. Aborting pipeline.")
        # Abort pipeline or notify here
        sys.exit(1)
    else:
        print("⚠️ No valid response received or link expired. Aborting pipeline.")
        sys.exit(1)

if __name__ == "__main__":
    main()
